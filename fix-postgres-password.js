// Script to fix PostgreSQL connection by setting the correct password
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('=== PostgreSQL Password Fix Tool ===');

// Create a .env file with the correct database credentials
function createOrUpdateEnvFile() {
  const envPath = path.resolve(process.cwd(), 'platform/wab/.env.local');
  
  console.log(`Creating/updating ${envPath} with correct database credentials...`);
  
  // Try both passwords we've discovered
  const envContent = `
# Database credentials set by fix-postgres-password.js
PGHOST=localhost
PGUSER=wab
PGPASSWORD=SEKRET
PGDATABASE=wab
PGPORT=5432
  `.trim();
  
  try {
    fs.writeFileSync(envPath, envContent);
    console.log(`✅ Successfully wrote database credentials to ${envPath}`);
    return true;
  } catch (err) {
    console.error(`❌ Failed to write to ${envPath}:`, err.message);
    return false;
  }
}

// Try to reset the password in PostgreSQL to match what the code expects
function tryResetPassword() {
  console.log('\n=== Attempting to reset PostgreSQL password ===');
  
  try {
    // Find PostgreSQL container
    console.log('Looking for PostgreSQL container...');
    const containerList = execSync('docker ps').toString();
    
    // Extract container IDs of postgres images
    const containerLines = containerList.split('\n').filter(line => 
      line.includes('postgres') || line.includes('pg')
    );
    
    if (containerLines.length === 0) {
      console.log('❌ No PostgreSQL containers found. Is your database running?');
      return false;
    }
    
    // Try each potential container
    for (const line of containerLines) {
      const containerId = line.split(' ')[0];
      console.log(`Found potential PostgreSQL container: ${containerId}`);
      
      // Try to update password to SEKRET
      console.log(`Attempting to set password to "SEKRET" for user "wab" in container ${containerId}...`);
      try {
        execSync(
          `docker exec ${containerId} bash -c "psql -U postgres -c \\"ALTER USER wab WITH PASSWORD 'SEKRET';\\"" || true`,
          { stdio: 'inherit' }
        );
        console.log('✅ Password reset command executed (may have succeeded)');
      } catch (err) {
        console.log('Failed with postgres user, trying with wab user...');
        try {
          execSync(
            `docker exec ${containerId} bash -c "psql -U wab -c \\"ALTER USER wab WITH PASSWORD 'SEKRET';\\"" || true`,
            { stdio: 'inherit' }
          );
          console.log('✅ Password reset command executed as wab user (may have succeeded)');
        } catch (resetErr) {
          console.error('❌ Failed to reset password with wab user as well');
        }
      }
      
      // Try with password too
      try {
        execSync(
          `docker exec ${containerId} bash -c "psql -U postgres -c \\"ALTER USER wab WITH PASSWORD 'password';\\"" || true`,
          { stdio: 'inherit' }
        );
        console.log('✅ Alternate password reset command executed (may have succeeded)');
      } catch (err) {
        console.error('❌ Failed to reset password to "password"');
      }
    }
    
    return true;
  } catch (err) {
    console.error('❌ Error attempting to reset password:', err.message);
    return false;
  }
}

// Create a shell script to set environment variables before starting the app
function createEnvScript() {
  const scriptPath = path.resolve(process.cwd(), 'start-with-db-env.sh');
  
  console.log(`Creating ${scriptPath} with environment variables...`);
  
  const scriptContent = `#!/bin/bash
# Generated by fix-postgres-password.js

# Set PostgreSQL environment variables
export PGHOST=localhost
export PGUSER=wab
export PGPASSWORD=SEKRET
export PGDATABASE=wab
export PGPORT=5432

# Run the original command with these environment variables
echo "Starting with database environment variables set..."
cd platform/wab && yarn dev
`;
  
  try {
    fs.writeFileSync(scriptPath, scriptContent);
    fs.chmodSync(scriptPath, 0o755); // Make executable
    console.log(`✅ Created startup script at ${scriptPath}`);
    console.log(`   Run with: ./start-with-db-env.sh`);
    return true;
  } catch (err) {
    console.error(`❌ Failed to create startup script:`, err.message);
    return false;
  }
}

// Main function
async function main() {
  let success = false;
  
  // Step 1: Create/update .env file
  success = createOrUpdateEnvFile();
  
  // Step 2: Try to reset PostgreSQL password
  success = tryResetPassword() || success;
  
  // Step 3: Create a startup script with environment variables
  success = createEnvScript() || success;
  
  if (success) {
    console.log('\n✅ Tasks completed. Try these next steps:');
    console.log('1. Restart your PostgreSQL container if you modified the password');
    console.log('2. Use the generated start script: ./start-with-db-env.sh');
    console.log('3. Or manually set environment variables: export PGPASSWORD=SEKRET && cd platform/wab && yarn dev');
  } else {
    console.log('\n❌ Failed to complete all tasks. Please try manual fixes:');
    console.log('1. Check if PostgreSQL is running: docker ps');
    console.log('2. Reset password manually: docker exec <container-id> psql -U postgres -c "ALTER USER wab WITH PASSWORD \'SEKRET\';"');
    console.log('3. Set environment variables: export PGPASSWORD=SEKRET');
  }
}

main().catch(err => {
  console.error('Unexpected error:', err);
  process.exit(1);
}); 